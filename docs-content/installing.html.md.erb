---
title: Installing and Configuring Microsoft Azure Service Broker
owner: Partners
---

This topic describes how to install and configure Microsoft Azure Service Broker.

##<a id='account'></a> Step 1: Set up Azure

In this step, you configure your Azure account to allow the Microsoft Azure Service Broker to create and manage Azure resources.

1. Create an Azure account by following these [steps](https://azure.microsoft.com/en-us/free/).

1. Create a service principal by following these [steps](https://github.com/cloudfoundry-incubator/bosh-azure-cpi-release/blob/master/docs/get-started/create-service-principal.md).

<p class="note"><strong>Note</strong>: The <code>Contributor</code> role needs to be assigned to the service principal. </p>

##<a id='database'></a>Step 2: Create a Service Broker Database

Microsoft Azure Service Broker stores information, for example the provisioning information of a service instance, in the database. Follow these [steps](https://github.com/Azure/meta-azure-service-broker/blob/master/docs/how-admin-deploy-the-broker.md#prerequisites) to create a SQL database on Azure.

##<a id='install'></a>Step 3: Install and Configure Microsoft Azure Service Broker

1. Download the product file from [Pivotal Network](https://network.pivotal.io/products/azure-service-broker).

1. Navigate to the Ops Manager Installation Dashboard and click **Import a Product** to upload the product file. 

1. Click **Add** next to the uploaded Microsoft Azure Service Broker tile in the Ops Manager **Available Products** view to add it to your staging area.

1. Click the newly added **Microsoft Azure Service Broker** tile to configure the sections as described below. After the configuration, return to the Ops Manager Installation Dashboard and click **Apply Changes** to install Microsoft Azure Service Broker tile.

###<a id='azure-config'></a> Azure Config

The setup in [Step 1](#account) must be successfully completed before beginning this configuration. You will need the Azure and database parameters from that step to successfully configure the broker.

1. Click **Azure Config**.

    <%= image_tag("images/azure-sb-azureconfig.png") %>

1. For **Azure Environment**, if you want to create Azure resource in mainland China, select `Azure China Cloud`. Otherwise, select `Azure Cloud`.

1. Enter the **Subscription Id** from [Step 1](#account).

1. Enter the **Tenant Id**, **Client Id** and **Client Secret** from [Step 1](#account).

1. Click **Save**.

###<a id='broker-config'></a> Broker Config

1. Click **Broker Config**. 

    <%= image_tag("images/azure-sb-brokerconfig.png") %>

1. For **Database Provider**, select the database type. At the current time, only `SQL Database` is supported.

1. For **Database Server**, enter the endpoint, for example `SQL-SERVER-NAME.database.windows.net`, or the IP address of the SQL database. 

1. For **Database Username** and **Database Password**, enter your database credentials.

1. For **Database Name**, enter the name of the database where the Microsoft Azure Service Broker can store information.

1. For **Database Encryption Key**, enter the key to encrypt the sensitive information which are stored in the database. It should be a 32-character fixed-length string. **If the key is forgotten, all sensitive information in the database will never be decrypted.**

1. Click **Save**.

###<a id='sqldb-config'></a> SQL Database Config

1. Click **SQL Database Config**. 

    <%= image_tag("images/azure-sb-sqldbconfig.png") %>

1. For **Allow to Create Sql Server**, select the checkbox if you want to allow the developers to create the SQL server through the service broker.

1. For **Enable Transparent Data Encryption**, select the checkbox if you want to create SQL Database with Transparent Data Encryption enabled by default.

1. If you did not select **Allow to Create Sql Server**, you must create a SQL server on Azure for developers to create databases:
	1. Click **Add**.
	1. Enter values for the following fields: **Resource Group of the SQL Server**, **Location of the SQL Server**, **SQL Server Name**, **SQL Server Administrator Login**, and **SQL Server Administrator Login Password**.

1. Click **Save**.

###<a id='defaultparameters-config'></a> Default Parameters Config

<p class="note"><strong>Note</strong>: If **Allow to Create Sql Server** was not checked true. It means that the sql databases will be 
	created in a pool of sql servers. Therefore, you must provide at least 1 sql server 
	in the sql server pool and you must add an entry into the default configuration for the `azure sqldb` default 
	parameters to include  `"sqlServerName": "<your-sql-server-name>"`. For example,
	
	```
	   {
	    "sqlServerName": "my-precreated-sql-server",
	    "sqlServerParameters": {
		"allowSqlServerFirewallRules": [
		    {
			"ruleName": "all",
			"startIpAddress": "0.0.0.0",
			"endIpAddress": "255.255.255.255"
		    }
		]
	    },
	    "transparentDataEncryption": true,
	    "sqldbParameters": {
		"properties": {
		    "collation": "SQL_Latin1_General_CP1_CI_AS"
		}
	    }
	```
	
	You may also wish to enable `Allow to Generate Names and Passwords for the Missing` in the `Default Parameters Config` tab to allow the broker to generate
	the database names, otherwise, developers must provide the parameters `-c { "sqlDbName": "a-unique-db-name" }`, when they
	perform a `cf create-service`.
	</p>


1. Click **Default Parameters Config**. 

    <%= image_tag("images/azure-sb-defaultparametersconfig.png") %>

1. If `Allow to Generate Names and Passwords for the Missing` checked, the broker can fix those missing names and passwords in the parameters for creating service instances. Check `generated-string` in the json examples in **Using Azure Service Broker** for details.

1. `Default Resource Group` and `Default Location` can be set to fix missing resource group and location in the parameters for creating service instances.

1. For each service, you can set default parameters for it. The broker can fix those missing parameters in the parameters for creating service instances. Set them with `{}` if you don't require any fixing. The priority of this rule is higher than the rules above.

1. Click **Save**.

##<a id='confirm'></a> Step 4: Confirm Installation

<p class="note"><strong>Note</strong>: The Microsoft Azure Service Broker installs an app named <code>azure-services-broker</code> in the <code>azure-service-broker-space</code> space of the <code>system</code> org.</p>

1. After Ops Manager finishes the installation, the **Microsoft Azure Service Broker** appears as a green tile in the **Installation Dashboard**.

    <%= image_tag("images/azure-sb-install.png") %>

1. In Apps Manager, the new services are listed in the **Marketplace**, and are exposed to all orgs and spaces. Users can create instances of these services only by using the Cloud Foundry Command Line Interface (cf CLI) because Apps Manager does not support asynchronous services. See the [Using Microsoft Azure Service Broker](using.html) topic for more information.

    <%= image_tag("images/azure-sb-marketplace.png") %>


##<a id="service-access"></a>Step 5: Confirm Service and Plan Access

The Microsoft Azure Service Broker is installed with all services enabled by default. All services can be listed in the Marketplace.

You can disable or enable any services through the cf CLI using the `cf disable-service-access` or `cf enable-service-access` commands.
